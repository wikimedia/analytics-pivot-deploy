"use strict";
var Q = require('q');
var request = require("request");
var logger_1 = require('./logger');
function makePostFlush(url, timeout) {
    if (timeout === void 0) { timeout = 30000; }
    return function (events) {
        var deferred = (Q.defer());
        request({
            method: "POST",
            url: url,
            json: events,
            timeout: timeout
        }, function (err, response, body) {
            if (err) {
                deferred.reject(err);
                return;
            }
            var statusCode = response.statusCode;
            if (statusCode < 200 || statusCode >= 300) {
                deferred.reject(new Error("Bad status code (" + statusCode + ")"));
                return;
            }
            deferred.resolve(null);
        });
        return deferred.promise;
    };
}
function trackerFactory(trackerFactoryOptions) {
    var bufferSize = trackerFactoryOptions.bufferSize || 1024;
    var flushInterval = trackerFactoryOptions.flushInterval || 10000;
    var timestamp = trackerFactoryOptions.timestamp || (function () { return new Date(); });
    var context = trackerFactoryOptions.context;
    var flush = trackerFactoryOptions.flush;
    var version = trackerFactoryOptions.version;
    if (!flush && trackerFactoryOptions.url) {
        flush = makePostFlush(trackerFactoryOptions.url);
    }
    var buffer = [];
    var flushing = false;
    function doFlush() {
        if (flushing || buffer.length === 0)
            return;
        flushing = true;
        var eventsToFlush = buffer.slice();
        flush(eventsToFlush).then(function () {
            logger_1.LOGGER.log("Posted " + eventsToFlush.length + " tracking events");
            buffer = buffer.slice(eventsToFlush.length);
            flushing = false;
        }, function (e) {
            logger_1.LOGGER.error("Failed to post " + eventsToFlush.length + " tracking events: " + e.message);
            flushing = false;
        });
    }
    setInterval(doFlush, flushInterval).unref();
    return {
        track: function (options) {
            if (buffer.length > bufferSize)
                return;
            var eventType = options.eventType, user = options.user, attr = options.attr, metric = options.metric, value = options.value;
            var event = {};
            if (context) {
                for (var k in context)
                    event[k] = context[k];
            }
            if (attr) {
                for (var k in attr)
                    event[k] = attr[k];
            }
            if (user) {
                event['user_id'] = user.id;
                event['user_email'] = user.email;
            }
            event['timestamp'] = timestamp();
            event['version'] = version;
            event['type'] = eventType;
            event['metric'] = metric;
            event['value'] = value;
            buffer.push(event);
        }
    };
}
function noop() { }
exports.TRACKER = {
    track: noop,
    init: initTracker
};
function initTracker(version, url, context) {
    var tempTracker = trackerFactory({
        version: version,
        url: url,
        context: context
    });
    exports.TRACKER.track = tempTracker.track;
}
