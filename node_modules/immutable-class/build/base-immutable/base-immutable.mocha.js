"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var chai_1 = require("chai");
var base_immutable_1 = require('./base-immutable');
function ensureNonNegative(n) {
    if (n < 0)
        throw new Error('must non negative positive');
}
var Car = (function (_super) {
    __extends(Car, _super);
    function Car(properties) {
        _super.call(this, properties);
    }
    Car.isCar = function (car) {
        return car instanceof Car;
    };
    Car.fromJS = function (properties) {
        return new Car(base_immutable_1.BaseImmutable.jsToValue(Car.PROPERTIES, properties));
    };
    Car.PROPERTIES = [
        {
            name: 'name',
            validate: function (n) {
                if (n.toLowerCase() !== n)
                    throw new Error('must be lowercase');
            }
        },
        {
            name: 'fuel',
            defaultValue: 'electric',
            possibleValues: ['gas', 'diesel', 'electric']
        },
        {
            name: 'subCar',
            defaultValue: null,
            immutableClass: Car
        },
        {
            name: 'range',
            defaultValue: 100,
            validate: [base_immutable_1.BaseImmutable.ensure.number, ensureNonNegative]
        },
        {
            name: 'relatedCars',
            defaultValue: [],
            immutableClassArray: Car
        },
        {
            name: 'createdOn',
            defaultValue: null,
            isDate: true
        }
    ];
    return Car;
}(base_immutable_1.BaseImmutable));
base_immutable_1.BaseImmutable.finalize(Car);
describe("BaseImmutable", function () {
    it("works with basics", function () {
        var car = Car.fromJS({ name: 'ford', fuel: 'electric' });
        chai_1.expect(car.get('name')).to.equal('ford');
        chai_1.expect(car.get('fuel')).to.equal('electric');
        chai_1.expect(car.getRange()).to.equal(100);
        car = car.change('fuel', 'gas');
        chai_1.expect(car.get('fuel')).to.equal('gas');
        car = car.changeFuel('diesel');
        chai_1.expect(car.getFuel()).to.equal('diesel');
        car = car.changeRange(0);
        chai_1.expect(car.getRange()).to.equal(0);
        chai_1.expect(car.toJS()).to.deep.equal({
            "fuel": "diesel",
            "name": "ford",
            "range": 0
        });
        var car2 = Car.fromJS(car.toJS());
        chai_1.expect(car2.equals(car)).to.equal(true);
        chai_1.expect(car2.toJS()).to.deep.equal(car.toJS());
    });
    it("works with dates", function () {
        var car = Car.fromJS({ name: 'ford', fuel: 'electric', createdOn: '2016-01-01T01:02:03.456Z' });
        chai_1.expect(car.toJS()).to.deep.equal({
            "name": "ford",
            "fuel": "electric",
            "createdOn": new Date('2016-01-01T01:02:03.456Z')
        });
    });
    it("works with errors", function () {
        chai_1.expect(function () {
            Car.fromJS({ fuel: 'electric' });
        }).to.throw('Car.name must be defined');
        chai_1.expect(function () {
            Car.fromJS({ name: 'Ford', fuel: 'electric' });
        }).to.throw('Car.name must be lowercase');
        chai_1.expect(function () {
            Car.fromJS({ name: 'ford', fuel: 'farts' });
        }).to.throw("Car.fuel can not have value 'farts' must be one of [gas, diesel, electric]");
        chai_1.expect(function () {
            Car.fromJS({ name: 'ford', fuel: 'electric', range: 'lol' });
        }).to.throw("Car.range must be a number");
        chai_1.expect(function () {
            Car.fromJS({ name: 'ford', fuel: 'electric', range: -3 });
        }).to.throw("Car.range must non negative positive");
        chai_1.expect(function () {
            Car.fromJS({
                name: 'ford',
                fuel: 'electric',
                range: 30,
                relatedCars: 123
            });
        }).to.throw("expected relatedCars to be an array");
        chai_1.expect(function () {
            Car.fromJS({
                name: 'ford',
                fuel: 'electric',
                range: 30,
                relatedCars: [
                    { name: 'Toyota', fuel: 'electric', range: 31 },
                    { name: 'Toyota', fuel: 'electric', range: 32 }
                ]
            });
        }).to.throw("Car.name must be lowercase");
        chai_1.expect(function () {
            Car.fromJS({
                name: 'ford',
                fuel: 'electric',
                range: 30,
                createdOn: 'time for laughs'
            });
        }).to.throw("Car.createdOn must be a Date");
    });
});
