export interface Validator {
    (x: any): void;
}
export interface Property {
    name: string;
    defaultValue?: any;
    possibleValues?: any[];
    validate?: Validator | Validator[];
    isDate?: boolean;
    immutableClass?: typeof BaseImmutable;
    immutableClassArray?: typeof BaseImmutable;
    equal?: (a: any, b: any) => boolean;
}
export interface ClassFnType {
    PROPERTIES: Property[];
    fromJS(properties: any): any;
    new (properties: any): any;
}
export declare abstract class BaseImmutable<ValueType, JSType> {
    static jsToValue(properties: Property[], js: any): any;
    static finalize(ClassFn: ClassFnType): void;
    static ensure: {
        number: (n: any) => void;
    };
    constructor(value: ValueType);
    ownProperties(): Property[];
    findOwnProperty(propName: string): Property | null;
    valueOf(): ValueType;
    toJS(): JSType;
    toJSON(): JSType;
    toString(): string;
    equals(other: BaseImmutable<ValueType, JSType>): boolean;
    get(propName: string): any;
    change(propName: string, newValue: any): this;
}
