"use strict";
var chai_1 = require("chai");
var equality_1 = require('./equality');
var Person = (function () {
    function Person(name) {
        this.name = name;
    }
    Person.fromJS = function (name) {
        return new Person(name);
    };
    Person.isPerson = function (candidate) {
        return candidate instanceof Person;
    };
    Person.prototype.toString = function () {
        return this.name;
    };
    Person.prototype.valueOf = function () {
        return this.name;
    };
    Person.prototype.toJS = function () {
        return this.name;
    };
    Person.prototype.toJSON = function () {
        return this.name;
    };
    Person.prototype.equals = function (other) {
        return Person.isPerson(other) && this.name === other.name;
    };
    return Person;
}());
describe("equality", function () {
    describe("generalEqual", function () {
        it("works with basics (strings)", function () {
            var tom = 'Tom';
            var bob1 = 'Bob';
            var bob2 = 'Bob';
            chai_1.expect(equality_1.generalEqual(null, null)).to.equal(true);
            chai_1.expect(equality_1.generalEqual(tom, null)).to.equal(false);
            chai_1.expect(equality_1.generalEqual(null, tom)).to.equal(false);
            chai_1.expect(equality_1.generalEqual(tom, bob1)).to.equal(false);
            chai_1.expect(equality_1.generalEqual(bob1, bob2)).to.equal(true);
        });
        it("works with basics (Dates)", function () {
            var tom = new Date('2016');
            var bob1 = new Date('2015');
            var bob2 = new Date('2015');
            chai_1.expect(equality_1.generalEqual(null, null)).to.equal(true);
            chai_1.expect(equality_1.generalEqual(tom, null)).to.equal(false);
            chai_1.expect(equality_1.generalEqual(null, tom)).to.equal(false);
            chai_1.expect(equality_1.generalEqual(tom, bob1)).to.equal(false);
            chai_1.expect(equality_1.generalEqual(bob1, bob2)).to.equal(true);
        });
        it("works immutables", function () {
            var tom = new Person('Tom');
            var bob1 = new Person('Bob');
            var bob2 = new Person('Bob');
            chai_1.expect(equality_1.generalEqual(null, null)).to.equal(true);
            chai_1.expect(equality_1.generalEqual(tom, null)).to.equal(false);
            chai_1.expect(equality_1.generalEqual(null, tom)).to.equal(false);
            chai_1.expect(equality_1.generalEqual(tom, bob1)).to.equal(false);
            chai_1.expect(equality_1.generalEqual(bob1, bob2)).to.equal(true);
        });
    });
    describe("immutableEqual", function () {
        it("works immutables", function () {
            var tom = new Person('Tom');
            var bob1 = new Person('Bob');
            var bob2 = new Person('Bob');
            chai_1.expect(equality_1.immutableEqual(null, null)).to.equal(true);
            chai_1.expect(equality_1.immutableEqual(tom, null)).to.equal(false);
            chai_1.expect(equality_1.immutableEqual(null, tom)).to.equal(false);
            chai_1.expect(equality_1.immutableEqual(tom, bob1)).to.equal(false);
            chai_1.expect(equality_1.immutableEqual(bob1, bob2)).to.equal(true);
        });
    });
    describe("immutableArraysEqual", function () {
        it("works", function () {
            var tom = new Person('Tom');
            var bob1 = new Person('Bob');
            var bob2 = new Person('Bob');
            chai_1.expect(equality_1.immutableArraysEqual(null, null)).to.equal(true);
            chai_1.expect(equality_1.immutableArraysEqual([], null)).to.equal(false);
            chai_1.expect(equality_1.immutableArraysEqual([tom], null)).to.equal(false);
            chai_1.expect(equality_1.immutableArraysEqual(null, [])).to.equal(false);
            chai_1.expect(equality_1.immutableArraysEqual(null, [tom])).to.equal(false);
            chai_1.expect(equality_1.immutableArraysEqual([tom], [])).to.equal(false);
            chai_1.expect(equality_1.immutableArraysEqual([tom], [bob1])).to.equal(false);
            chai_1.expect(equality_1.immutableArraysEqual([bob1, null], [bob1, tom])).to.equal(false);
            chai_1.expect(equality_1.immutableArraysEqual([bob1, tom], [bob1, null])).to.equal(false);
            chai_1.expect(equality_1.immutableArraysEqual([], [])).to.equal(true);
            chai_1.expect(equality_1.immutableArraysEqual([bob1], [bob2])).to.equal(true);
            chai_1.expect(equality_1.immutableArraysEqual([bob1, tom], [bob2, tom])).to.equal(true);
        });
    });
    describe("immutableLookupsEqual", function () {
        it("works", function () {
            var tom = new Person('Tom');
            var bob1 = new Person('Bob');
            var bob2 = new Person('Bob');
            chai_1.expect(equality_1.immutableLookupsEqual(null, null)).to.equal(true);
            chai_1.expect(equality_1.immutableLookupsEqual({}, null)).to.equal(false);
            chai_1.expect(equality_1.immutableLookupsEqual({ a: tom }, null)).to.equal(false);
            chai_1.expect(equality_1.immutableLookupsEqual(null, {})).to.equal(false);
            chai_1.expect(equality_1.immutableLookupsEqual(null, { a: tom })).to.equal(false);
            chai_1.expect(equality_1.immutableLookupsEqual({ a: tom }, {})).to.equal(false);
            chai_1.expect(equality_1.immutableLookupsEqual({ a: tom }, { a: bob1 })).to.equal(false);
            chai_1.expect(equality_1.immutableLookupsEqual({ a: bob1, b: null }, { a: bob1, b: tom })).to.equal(false);
            chai_1.expect(equality_1.immutableLookupsEqual({ a: bob1, b: tom }, { a: bob1, b: null })).to.equal(false);
            chai_1.expect(equality_1.immutableLookupsEqual({}, {})).to.equal(true);
            chai_1.expect(equality_1.immutableLookupsEqual({ a: bob1 }, { a: bob2 })).to.equal(true);
            chai_1.expect(equality_1.immutableLookupsEqual({ a: bob1, b: tom }, { a: bob2, b: tom })).to.equal(true);
        });
    });
});
