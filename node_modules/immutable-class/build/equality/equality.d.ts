export interface Equalable {
    equals(other: any): boolean;
}
export declare function generalEqual<T>(a: T, b: T): boolean;
export declare function immutableEqual<T extends Equalable>(a: T, b: T): boolean;
export declare function generalArraysEqual<T>(arrayA: T[], arrayB: T[]): boolean;
export declare function immutableArraysEqual<T extends Equalable>(arrayA: T[], arrayB: T[]): boolean;
export declare function generalLookupsEqual<T>(lookupA: {
    [k: string]: T;
}, lookupB: {
    [k: string]: T;
}): boolean;
export declare function immutableLookupsEqual<T extends Equalable>(lookupA: {
    [k: string]: T;
}, lookupB: {
    [k: string]: T;
}): boolean;
