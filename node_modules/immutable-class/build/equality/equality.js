"use strict";
function generalEqual(a, b) {
    if (a === b)
        return true;
    if (a && b) {
        if (typeof a.toISOString === 'function' && typeof b.toISOString === 'function') {
            return a.valueOf() === b.valueOf();
        }
        if (Array.isArray(a) && Array.isArray(b)) {
            return generalArraysEqual(a, b);
        }
        if (typeof a.equals === 'function') {
            return a.equals(b);
        }
    }
    return false;
}
exports.generalEqual = generalEqual;
function immutableEqual(a, b) {
    if (a === b)
        return true;
    return Boolean(a) && a.equals(b);
}
exports.immutableEqual = immutableEqual;
function generalArraysEqual(arrayA, arrayB) {
    if (arrayA === arrayB)
        return true;
    if (!arrayA !== !arrayB)
        return false;
    var length = arrayA.length;
    if (length !== arrayB.length)
        return false;
    for (var i = 0; i < length; i++) {
        if (!generalEqual(arrayA[i], arrayB[i]))
            return false;
    }
    return true;
}
exports.generalArraysEqual = generalArraysEqual;
function immutableArraysEqual(arrayA, arrayB) {
    if (arrayA === arrayB)
        return true;
    if (!arrayA !== !arrayB)
        return false;
    var length = arrayA.length;
    if (length !== arrayB.length)
        return false;
    for (var i = 0; i < length; i++) {
        if (!immutableEqual(arrayA[i], arrayB[i]))
            return false;
    }
    return true;
}
exports.immutableArraysEqual = immutableArraysEqual;
function generalLookupsEqual(lookupA, lookupB) {
    if (lookupA === lookupB)
        return true;
    if (!lookupA !== !lookupB)
        return false;
    var keysA = Object.keys(lookupA);
    var keysB = Object.keys(lookupB);
    if (keysA.length !== keysB.length)
        return false;
    for (var _i = 0, keysA_1 = keysA; _i < keysA_1.length; _i++) {
        var k = keysA_1[_i];
        if (!generalEqual(lookupA[k], lookupB[k]))
            return false;
    }
    return true;
}
exports.generalLookupsEqual = generalLookupsEqual;
function immutableLookupsEqual(lookupA, lookupB) {
    if (lookupA === lookupB)
        return true;
    if (!lookupA !== !lookupB)
        return false;
    var keysA = Object.keys(lookupA);
    var keysB = Object.keys(lookupB);
    if (keysA.length !== keysB.length)
        return false;
    for (var _i = 0, keysA_2 = keysA; _i < keysA_2.length; _i++) {
        var k = keysA_2[_i];
        if (!immutableEqual(lookupA[k], lookupB[k]))
            return false;
    }
    return true;
}
exports.immutableLookupsEqual = immutableLookupsEqual;
