// Generated by dts-bundle v0.5.0
// Dependencies for this module:
//   ../immutable-class

declare module 'chronoshift' {
    export * from 'chronoshift/date-parser/date-parser';
    export * from 'chronoshift/floor-shift-ceil/floor-shift-ceil';
    export * from 'chronoshift/timezone/timezone';
    export * from 'chronoshift/duration/duration';
    export * from 'chronoshift/utils/utils';
    export var WallTime: any;
}

declare module 'chronoshift/date-parser/date-parser' {
    import { Timezone } from 'chronoshift/timezone/timezone';
    import { Duration } from 'chronoshift/duration/duration';
    export function parseSQLDate(type: string, v: string): Date;
    export function parseISODate(date: string, timezone?: Timezone): Date | null;
    export interface IntervalParse {
        computedStart: Date;
        computedEnd: Date;
        start?: Date | null;
        end?: Date | null;
        duration?: Duration | null;
    }
    export function parseInterval(str: string, timezone?: Timezone, now?: Date): IntervalParse;
}

declare module 'chronoshift/floor-shift-ceil/floor-shift-ceil' {
    import { Timezone } from 'chronoshift/timezone/timezone';
    export interface AlignFn {
        (dt: Date, tz: Timezone): Date;
    }
    export interface ShiftFn {
        (dt: Date, tz: Timezone, step: number): Date;
    }
    export interface RoundFn {
        (dt: Date, roundTo: number, tz: Timezone): Date;
    }
    export interface TimeShifter {
        canonicalLength: number;
        siblings?: number;
        floor: AlignFn;
        round?: RoundFn;
        shift: ShiftFn;
        ceil?: AlignFn;
        move?: ShiftFn;
    }
    export const second: TimeShifter;
    export const minute: TimeShifter;
    export const hour: TimeShifter;
    export const day: TimeShifter;
    export const week: TimeShifter;
    export const month: TimeShifter;
    export const year: TimeShifter;
    export interface Shifters {
        second: TimeShifter;
        minute: TimeShifter;
        hour: TimeShifter;
        day: TimeShifter;
        week: TimeShifter;
        month: TimeShifter;
        year: TimeShifter;
        [key: string]: TimeShifter;
    }
    export const shifters: Shifters;
}

declare module 'chronoshift/timezone/timezone' {
    import { Instance } from 'immutable-class';
    export class Timezone implements Instance<string, string> {
        static UTC: Timezone;
        static isTimezone(candidate: any): boolean;
        static fromJS(spec: string): Timezone;
        constructor(timezone: string);
        valueOf(): string;
        toJS(): string;
        toJSON(): string;
        toString(): string;
        equals(other: Timezone): boolean;
        isUTC(): boolean;
    }
}

declare module 'chronoshift/duration/duration' {
    import { Instance } from 'immutable-class';
    import { Timezone } from 'chronoshift/timezone/timezone';
    export interface DurationValue {
        year?: number;
        month?: number;
        week?: number;
        day?: number;
        hour?: number;
        minute?: number;
        second?: number;
        [span: string]: number | undefined;
    }
    export class Duration implements Instance<DurationValue, string> {
        singleSpan: string;
        spans: DurationValue;
        static fromJS(durationStr: string): Duration;
        static fromCanonicalLength(length: number): Duration;
        static isDuration(candidate: any): boolean;
        constructor(spans: DurationValue);
        constructor(start: Date, end: Date, timezone: Timezone);
        toString(): string;
        add(duration: Duration): Duration;
        subtract(duration: Duration): Duration;
        valueOf(): DurationValue;
        toJS(): string;
        toJSON(): string;
        equals(other: Duration): boolean;
        isSimple(): boolean;
        isFloorable(): boolean;
        floor(date: Date, timezone: Timezone): Date;
        shift(date: Date, timezone: Timezone, step?: number): Date;
        materialize(start: Date, end: Date, timezone: Timezone, step?: number): Date[];
        isAligned(date: Date, timezone: Timezone): boolean;
        dividesBy(smaller: Duration): boolean;
        getCanonicalLength(): number;
        getDescription(capitalize?: boolean): string;
        getSingleSpan(): string | null;
        getSingleSpanValue(): number | null;
    }
}

declare module 'chronoshift/utils/utils' {
    export function isDate(d: any): boolean;
}

