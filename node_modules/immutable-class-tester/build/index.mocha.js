"use strict";
var chai_1 = require("chai");
var index_1 = require('./index');
function isInstanceOf(thing, constructor) {
    if (typeof constructor !== 'function')
        throw new TypeError("constructor must be a function");
    if (thing instanceof constructor)
        return true;
    if (thing == null)
        return false;
    var constructorName = constructor.name;
    if (!constructorName)
        return false;
    var thingProto = thing.__proto__;
    while (thingProto && thingProto.constructor) {
        if (thingProto.constructor.name === constructorName)
            return true;
        thingProto = thingProto.__proto__;
    }
    return false;
}
exports.isInstanceOf = isInstanceOf;
var Animal = (function () {
    function Animal(name) {
        this.name = name;
    }
    Animal.fromJS = function (name) {
        name = name.replace(/^#/, '');
        return new Animal(name);
    };
    Animal.isAnimal = function (animal) {
        return isInstanceOf(animal, Animal);
    };
    Animal.prototype.toString = function () {
        return this.name;
    };
    Animal.prototype.valueOf = function () {
        return this.name;
    };
    Animal.prototype.toJS = function () {
        return this.name;
    };
    Animal.prototype.toJSON = function () {
        return this.name;
    };
    Animal.prototype.equals = function (other) {
        return Animal.isAnimal(other) && this.name === other.name;
    };
    return Animal;
}());
var AnimalNoFromJS = (function () {
    function AnimalNoFromJS(name) {
        this.name = name;
    }
    AnimalNoFromJS.isAnimalNoFromJS = function (animal) {
        return isInstanceOf(animal, AnimalNoFromJS);
    };
    return AnimalNoFromJS;
}());
var AnimalBadToJS = (function () {
    function AnimalBadToJS(name) {
        this.name = name;
    }
    AnimalBadToJS.fromJS = function (name) {
        return new AnimalBadToJS(name);
    };
    AnimalBadToJS.isAnimalBadToJS = function (animal) {
        return isInstanceOf(animal, AnimalBadToJS);
    };
    AnimalBadToJS.prototype.toString = function () {
        return this.name;
    };
    AnimalBadToJS.prototype.valueOf = function () {
        return this.name;
    };
    AnimalBadToJS.prototype.toJS = function () {
        return 'Bad ' + this.name;
    };
    AnimalBadToJS.prototype.toJSON = function () {
        return this.name;
    };
    AnimalBadToJS.prototype.equals = function (other) {
        return AnimalBadToJS.isAnimalBadToJS(other) && this.name === other.name;
    };
    return AnimalBadToJS;
}());
var AnimalWithContext = (function () {
    function AnimalWithContext(p) {
        this.name = p.n;
        this.weight = p.w;
    }
    AnimalWithContext.fromJS = function (name, animalWeights) {
        var w = animalWeights[name];
        if (!w)
            throw new Error("unknown animal (it has no weight)");
        return new AnimalWithContext({
            n: name,
            w: w
        });
    };
    AnimalWithContext.isAnimalWithContext = function (animal) {
        return isInstanceOf(animal, AnimalWithContext);
    };
    AnimalWithContext.prototype.toString = function () {
        return this.name;
    };
    AnimalWithContext.prototype.valueOf = function () {
        return { n: this.name };
    };
    AnimalWithContext.prototype.toJS = function () {
        return this.name;
    };
    AnimalWithContext.prototype.toJSON = function () {
        return this.name;
    };
    AnimalWithContext.prototype.equals = function (other) {
        return AnimalWithContext.isAnimalWithContext(other) && this.name === other.name;
    };
    return AnimalWithContext;
}());
describe("testImmutableClass", function () {
    it("works for Animal class", function () {
        index_1.testImmutableClass(Animal, [
            "Koala",
            "Snake",
            "Dog",
            "Cat"
        ]);
    });
    it("fails when given non fixed point js", function () {
        chai_1.expect(function () {
            index_1.testImmutableClass(Animal, [
                "Koala",
                "Snake",
                "Dog",
                "#Cat"
            ]);
        }).to.throw(Error, "Animal.fromJS(obj).toJS() was not a fixed point (did not deep equal obj) [in object 3]: expected 'Cat' to deeply equal '#Cat'");
    });
    it("rejects AnimalNoFromJS class", function () {
        chai_1.expect(function () {
            index_1.testImmutableClass(AnimalNoFromJS, [
                "Koala",
                "Snake",
                "Dog"
            ]);
        }).to.throw(Error, 'AnimalNoFromJS.fromJS should exist: expected undefined to be a function');
    });
    it("rejects AnimalBadToJS class", function () {
        chai_1.expect(function () {
            index_1.testImmutableClass(AnimalBadToJS, [
                "Koala",
                "Snake",
                "Dog"
            ]);
        }).to.throw(Error, "AnimalBadToJS.fromJS(obj).toJS() was not a fixed point (did not deep equal obj) [in object 0]: expected 'Bad Koala' to deeply equal 'Koala'");
    });
    it("works for AnimalWithContext class (with context)", function () {
        var animalWeights = {
            "Koala": 5,
            "Snake": 4,
            "Dog": 12
        };
        index_1.testImmutableClass(AnimalWithContext, [
            "Koala",
            "Snake",
            "Dog"
        ], {
            context: animalWeights
        });
    });
});
