"use strict";
var pg = require("pg");
var pgTypes = require("pg-types");
var Q = require('q');
var parseDateUTC = require('postgres-date-utc');
pgTypes.setTypeParser(1700, pgTypes.getTypeParser(700));
pgTypes.setTypeParser(20, pgTypes.getTypeParser(21));
pgTypes.setTypeParser(1082, parseDateUTC);
pgTypes.setTypeParser(1114, parseDateUTC);
pgTypes.setTypeParser(1184, parseDateUTC);
function basicLocator(host) {
    var hostnamePort = host.split(':');
    var hostname;
    var port;
    if (hostnamePort.length > 1) {
        hostname = hostnamePort[0];
        port = Number(hostnamePort[1]);
    }
    else {
        hostname = hostnamePort[0];
        port = 5432;
    }
    return function () {
        return Q({
            hostname: hostname,
            port: port
        });
    };
}
function postgresRequesterFactory(parameters) {
    var locator = parameters.locator;
    if (!locator) {
        var host = parameters.host;
        if (!host)
            throw new Error("must have a `host` or a `locator`");
        locator = basicLocator(host);
    }
    var user = parameters.user;
    var password = parameters.password;
    var database = parameters.database;
    return function (request) {
        var query = request.query;
        return locator()
            .then(function (location) {
            var client = new pg.Client({
                host: location.hostname,
                port: location.port || 5432,
                database: database,
                user: user,
                password: password,
                parseInputDatesAsUTC: true
            });
            client.on('drain', client.end.bind(client));
            client.connect();
            var deferred = (Q.defer());
            client.query(query, function (err, result) {
                if (err) {
                    deferred.reject(err);
                }
                else {
                    deferred.resolve(result.rows);
                }
            });
            return deferred.promise;
        });
    };
}
exports.postgresRequesterFactory = postgresRequesterFactory;
