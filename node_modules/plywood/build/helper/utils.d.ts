export declare function hasOwnProperty(obj: any, key: string): boolean;
export declare function repeat(str: string, times: int): string;
export declare function arraysEqual<T>(a: Array<T>, b: Array<T>): boolean;
export declare function dictEqual(dictA: Lookup<any>, dictB: Lookup<any>): boolean;
export declare function find<T>(array: T[], fn: (value: T, index: int, array: T[]) => boolean): T;
export declare function findIndex<T>(array: T[], fn: (value: T, index: int, array: T[]) => boolean): int;
export interface Nameable {
    name: string;
}
export declare function findByName<T extends Nameable>(array: T[], name: string): T;
export declare function findIndexByName<T extends Nameable>(array: T[], name: string): int;
export declare function overrideByName<T extends Nameable>(things: T[], thingOverride: T): T[];
export declare function overridesByName<T extends Nameable>(things: T[], thingOverrides: T[]): T[];
export declare function shallowCopy<T>(thing: Lookup<T>): Lookup<T>;
export declare function deduplicateSort(a: string[]): string[];
export declare function mapLookup<T, U>(thing: Lookup<T>, fn: (x: T) => U): Lookup<U>;
export declare function emptyLookup(lookup: Lookup<any>): boolean;
export declare function nonEmptyLookup(lookup: Lookup<any>): boolean;
export declare function safeAdd(num: number, delta: number): number;
export declare function continuousFloorExpression(variable: string, floorFn: string, size: number, offset: number): string;
export declare class ExtendableError extends Error {
    stack: string;
    constructor(message: string);
}
